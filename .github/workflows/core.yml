name: Build x86-64
on: [push, pull_request]
jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Checkout submodules
      env:
        SSH_KEY: ${{secrets.SSH_KEY_PRIVATE}}
      run: |
        mkdir $HOME/.ssh && echo "$SSH_KEY" > $HOME/.ssh/id_rsa && chmod 600 $HOME/.ssh/id_rsa
        eval `ssh-agent -t 60 -s`
        ssh-add $HOME/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        git submodule sync
        git submodule update --init --recursive
    - name: Install dependancies
      run: sudo apt-get install -y libboost-thread-dev libgtest-dev curl unzip zlib1g-dev libeigen3-dev libboost-filesystem-dev libpulse-dev

    - name: Install gtest
      run: |
        cd /usr/src/gtest
        sudo cmake .
        sudo make
        sudo cp *.a /usr/lib && sudo ln -s /usr/lib/libgtest.a /usr/local/lib/libgtest.a && sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a
        cd
    - name: Build & Unit Test
      run: |
        mkdir -p build
        cd build
        cmake ..
        make -j8
        ./tests/tests

  coverage:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Checkout submodules
      env:
        SSH_KEY: ${{secrets.SSH_KEY_PRIVATE}}
      run: |
        mkdir $HOME/.ssh && echo "$SSH_KEY" > $HOME/.ssh/id_rsa && chmod 600 $HOME/.ssh/id_rsa
        eval `ssh-agent -t 60 -s`
        ssh-add $HOME/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        git submodule sync
        git submodule update --init --recursive
    - name: Install dependancies
      run: sudo apt-get install -y libboost-thread-dev libgtest-dev curl unzip zlib1g-dev libeigen3-dev lcov libboost-filesystem-dev

    - name: Install gtest
      run: |
        cd /usr/src/gtest
        sudo cmake .
        sudo make
        sudo cp *.a /usr/lib && sudo ln -s /usr/lib/libgtest.a /usr/local/lib/libgtest.a && sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a
        cd
    - name: Coverage build & Upload coverage
      env: 
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=ON -DBUILD_TESTS=ON .. && make
        make test_coverage -j8
        lcov --directory . --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
        lcov --list coverage.info
        bash <(curl -s https://codecov.io/bash) -f coverage.info